import type { NextPage } from 'next'
import Head from 'next/head'
import React, { useState } from "react";
import Ticker from '../components/Ticker';
import Styles from '../styles/Home.module.css'
import { IHomepageProps, IPair } from "../Constants";
import TradingPairs from "../components/TradingPairs";

const Home: NextPage<IHomepageProps> = ({
  atv,
  tradingPairs,
  initialTradingPairData,
}: IHomepageProps) => {
  const [selectedPair, setSelectedPair] = useState({
    name: tradingPairs[0].name,
    ...initialTradingPairData,
  });


  const [loading, setLoading] = useState(false);

  const [error, setError] = useState<Error | null>(null);

  const handleSelectedPair = async (pair: IPair) => {
    try {
      setLoading(true);

      const pairRes = await fetch(
        `//cors-anywhere.herokuapp.com/https://bitstamp.net/api/v2/ticker/${pair.url_symbol}`
      );

      const pairData = await pairRes.json();

      setSelectedPair({ name: pair.description, ...pairData });
      setLoading(false);
    } catch (error: unknown) {
      setError(error as Error);
    }
  };

  if (error) {
    return <div>{error.message}</div>;
  }

  return (
    <div>
      <Head>
        <title>GJ-test</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
         <div className="flex flex-wrap overflow-hidden lg:-mx-2 xl:-mx-1 h-full">
        <div className="w-full overflow-hidden lg:my-2 lg:w-full xl:my-1 xl:px-1 xl:w-1/2 ">
          <Ticker atv={atv} />
        </div>
        <div className="w-full overflow-hidden lg:my-2 lg:w-full xl:my-1 xl:px-1 xl:w-1/2 space-y-3">
          <h1>Trading Pairs</h1>
          <div className={Styles.tradingpairsContainer}>
            <TradingPairs
              tradingPairs={tradingPairs}
              selectedPair={handleSelectedPair}
            />
          </div>
        </div>
        </div>
    </div>
  );
};

export async function getStaticProps() {
  const tradingPairsData = await fetch(
    "https://www.bitstamp.net/api/v2/trading-pairs-info/"
  );

  const bitstampData = await fetch(
    "https://www.bitstamp.net/api/v2/ticker/btcusd"
  );

  const coinbaseData = await fetch(
    "https://api.coinbase.com/v2/exchange-rates?currency=BTC"
  );

  const bitfinexData = await fetch(
    "https://api-pub.bitfinex.com/v2/tickers?symbols=tBTCUSD"
  );

  const tradingPairs = await tradingPairsData.json();
  const bitstampDataJson = await bitstampData.json();
  const coinbaseDataJson = await coinbaseData.json();
  const bitfinexDataJson = await bitfinexData.json();

  const initialTradingPairResponse = await fetch(
    `https://www.bitstamp.net/api/v2/ticker/${tradingPairs[0].url_symbol}/`
  );

  const initialTradingPairData = await initialTradingPairResponse.json();

  const atv = new Intl.NumberFormat("en-US", {
    style: "currency",
    currency: "USD",
  }).format(
    (Number(bitstampDataJson.last) +
      Number(coinbaseDataJson.data.rates.USD) +
      bitfinexDataJson[0][1]) /
      3
  );

  return {
    props: {
      atv,
      tradingPairs,
      initialTradingPairData,
    },
  };
}

export default Home
